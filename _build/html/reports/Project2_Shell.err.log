Traceback (most recent call last):
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\jonat\anaconda3\envs\jb-env\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

# Parameters 
omega0 =      # natural frequency (rad/s)
x0     =     # initial amplitude (m)
phi    =   # phase angle (radians)
v0     = 0     # initial velocity (m/s)
T      =    # total simulation time (s)

t = np.linspace(0, T, 1000)

def damped_solution(t, x0, v0, omega0, beta, phi=0.0):
    """
    Return x(t) for a damped oscillator with damping coefficient Î² and phase Ï†.
    Equation: x'' + 2Î²x' + Ï‰â‚€Â²x = 0
    """
    if beta == 0:  # What type of oscillation?
        x = #insert equation for specified oscillation type.
    elif beta < omega0:  # What type of oscillation?
        omega1 = #insert equation for omega 1
        x = #insert equation for specified oscillation type.
    elif np.isclose(beta, omega0):  # What type of oscillation?
        C1 = x0
        C2 = v0+beta*x0
        x = (C1 + C2*(t+phi/omega0))*np.exp(-beta*(t+phi/omega0))
    elif: beta > omega0 # What type of oscillation?
        r1 = -beta + np.sqrt(beta**2 - omega0**2)
        r2 = -beta - np.sqrt(beta**2 - omega0**2)
        C1 = (v0 - r2*x0)/(r1 - r2)
        C2 = x0 - C1
        x = (C1*np.exp(r1*(t+phi/omega0)) + C2*np.exp(r2*(t+phi/omega0)))
    return x
plt.plot(t,damped_solution(t, x0, v0, omega0, 0, phi)) #Need a plot for each type of oscillation with correct beta values
------------------


[1;36m  Cell [1;32mIn[1], line 5[1;36m[0m
[1;33m    omega0 =      # natural frequency (rad/s)[0m
[1;37m                  ^[0m
[1;31mSyntaxError[0m[1;31m:[0m invalid syntax


